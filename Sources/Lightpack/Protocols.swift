import Foundation

/// Protocol defining the core functionality for the Lightpack library.
public protocol LightpackProtocol {
    /// A dictionary of all models, keyed by their model IDs.
    /// Each LPModel contains information about a specific model, including its status, size, and other metadata.
    var models: [String: LPModel] { get }
    
    /// A dictionary of all model families, keyed by their family IDs.
    /// Each `LPModelFamily` contains information about a group of related models.
    var families: [String: LPModelFamily] { get }

    /// The currently loaded model, if any.
    /// This will be `nil` if no model is currently loaded.
    var loadedModel: LPModel? { get }

    /// The total size of all downloaded models in bytes.
    var totalModelSize: Float { get }
    
    /// Cancels the download of a specific model.
    ///
    /// - Parameter modelId: The unique identifier of the model to cancel download for.
    /// - Throws: An error if the cancellation process fails.
    func cancelDownloadModel(_ modelId: String) async throws
    
    /// Initiates a chat interaction with a specified model.
    ///
    /// - Parameters:
    ///   - modelId: The unique identifier of the model to use for chat. If nil, uses the default or active model.
    ///   - messages: An array of chat messages to provide context for the interaction.
    ///   - onToken: A closure that's called for each token generated by the model.
    /// - Throws: An error if the chat process encounters issues.
    func chatModel(_ modelId: String?, messages: [LPChatMessage], onToken: @escaping (String) -> Void) async throws
    
    /// Clears the current chat context.
    ///
    /// This function removes all previous chat history and resets the chat state.
    /// It's useful for starting a new conversation or freeing up memory.
    ///
    /// - Throws: An error if the clearing process encounters any issues.
    func clearChat() async throws
    
    /// Initiates the download of a specific model.
    ///
    /// - Parameter modelId: The unique identifier of the model to download.
    /// - Throws: An error if the download process fails to start or complete.
    func downloadModel(_ modelId: String) async throws
    
    /// Retrieves a list of models based on specified criteria.
    ///
    /// - Parameters:
    ///   - bitMax: The maximum number of bits for the model (optional).
    ///   - bitMin: The minimum number of bits for the model (optional).
    ///   - familyIds: An array of family identifiers to filter by (optional).
    ///   - modelIds: An array of specific model identifiers to retrieve (optional).
    ///   - page: The page number for paginated results (optional).
    ///   - pageSize: The number of items per page (optional).
    ///   - parameterIds: An array of parameter identifiers to filter by (optional).
    ///   - quantizationIds: An array of quantization identifiers to filter by (optional).
    ///   - sizeMax: The maximum size of the model in bytes (optional).
    ///   - sizeMin: The minimum size of the model in bytes (optional).
    ///   - sort: A string indicating the sort order of the results (optional).
    ///   - completion: A closure called with the result of the operation, containing the models response and an array of updated model IDs.
    func getModels(
        bitMax: Int?,
        bitMin: Int?,
        familyIds: [String]?,
        modelIds: [String]?,
        page: Int?,
        pageSize: Int?,
        parameterIds: [String]?,
        quantizationIds: [String]?,
        sizeMax: Float?,
        sizeMin: Float?,
        sort: String?,
        completion: @escaping (Result<(LPModelsResponse, [String]), LPError>) -> Void
    )
    
    /// Retrieves a list of model families based on specified criteria.
    ///
    /// - Parameters:
    ///   - familyIds: An array of family identifiers to retrieve (optional).
    ///   - modelParameterIds: An array of model parameter identifiers to filter by (optional).
    ///   - page: The page number for paginated results (optional).
    ///   - pageSize: The number of items per page (optional).
    ///   - sort: A string indicating the sort order of the results (optional).
    ///   - completion: A closure called with the result of the operation, containing the model families response and an array of updated family IDs.
    func getModelFamilies(
        familyIds: [String]?,
        modelParameterIds: [String]?,
        page: Int?,
        pageSize: Int?,
        sort: String?,
        completion: @escaping (Result<(LPModelFamiliesResponse, [String]), LPError>) -> Void
    )
        
    /// Loads a specific model into memory.
    ///
    /// - Parameters:
    ///   - modelId: The unique identifier of the model to load.
    /// - Throws: An error if the model fails to load.
    func loadModel(_ modelId: String) async throws
    
    /// Pauses the download of a specific model.
    ///
    /// - Parameter modelId: The unique identifier of the model to pause download for.
    /// - Throws: An error if the pause operation fails.
    func pauseDownloadModel(_ modelId: String) async throws
    
    /// Removes one or more models from the local storage.
    ///
    /// - Parameters:
    ///   - modelIds: An array of model identifiers to remove. If nil and removeAll is false, no action is taken.
    ///   - removeAll: A boolean indicating whether to remove all locally stored models.
    /// - Throws: An error if the removal process fails.
    func removeModels(modelIds: [String]?, removeAll: Bool) async throws

    /// Resumes the download of a previously paused model.
    ///
    /// - Parameter modelId: The unique identifier of the model to resume download for.
    /// - Throws: An error if the resume operation fails.
    func resumeDownloadModel(_ modelId: String) async throws
}

@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public protocol URLSessionProtocol: Sendable {
    func dataTask(with request: URLRequest, completionHandler: @escaping @Sendable (Data?, URLResponse?, Error?) -> Void) -> URLSessionDataTask
}

@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension URLSession: URLSessionProtocol {}
